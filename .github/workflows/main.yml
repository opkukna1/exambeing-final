# Name of your workflow
name: Android Build CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for the "main" branch
  push:
    branches: [ "main" ]
    
  # Triggers the workflow on pull request events for the "main" branch
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Sets up the Java Development Kit (JDK) required for Android builds
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Caches Gradle dependencies to speed up subsequent builds
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Grant execute permission for gradlew (important for Flutter projects)
      # This step is often necessary to run the build command.
      - name: Make gradle executable
        run: chmod +x ./android/gradlew
        # For a native Android project, the path might just be:
        # run: chmod +x ./gradlew

      # 5. Build the app using Gradle
      # Based on your preference, you could replace './android/gradlew' with 'gradle'
      # However, using the wrapper ('gradlew') is highly recommended for CI to ensure consistency.
      - name: Build with Gradle
        run: ./android/gradlew -p ./android assembleDebug
        # For a native Android project, the command would be:
        # run: ./gradlew assembleDebug

      # 6. (Optional) Upload the built APK file as a workflow artifact
      # This lets you download the compiled app directly from the GitHub Actions run.
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: build/app/outputs/apk/debug/app-debug.apk

